BNF grammar
===========

< program >     ::= < var-declist > < fun-declist > < block >
                    | < fun-declist > < block > 
                    | < block >


###################
< fun-declist > ::= < fun > <fun-declist'>
                    
< fun-declist' >::= < fun > <fun-declist'>
                    | ""

< fun >         ::= < fun-type > VARIABLE LPAREN < fun' >
              
< fun' >        ::= < param-list > RPAREN <block>
                    | RPAREN <block>

< fun-type >    ::= PROC
                    | (NUMTYPE | CHARTYPE)

< param-list >  ::= < param-decl > <param-list'>

< param-list' > ::= COMMA <param-decl> <param-list'>
                    | ""

< param-decl >  ::= (NUMTYPE | CHARTYPE) <param-decl'>
                    
< param-decl' > ::= VARIABLE 
                    | LBRACK RBRACK <id>

< block >       ::= BEGIN <block'>

< block' >      ::= <var-declist> <stmnt-list> END
                    | <stmnt-list> END

< var-declist > ::= < var-decl > < var-declist' >

< var-declist' >::= < var-decl > < var-declist'>
                    | ""

< var-decl >    ::= (NUMTYPE | CHARTYPE) VARIABLE <var-decl'>

< var-decl' >   ::= LBRACK <bounds> RBRACK
                    | ""

< bounds >     ::=  < integer > <bounds'>

< bounds'>     ::=  COMMA <integer> <bounds'>
                    | ""
############################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

< stmnt-list >  ::= < stmnt > <stmnt-list'>

< stmnt-list' > ::= ""
                    | <stmnt> <stmnt-list'>

< stmnt >       ::= < assign > 
                    | < swap >
                    | < branch > 
                    | < loop > 
                    | < expr >
                    | < print >
                    | < read >

< assign >      ::= < ref > ASSIGN < expr >

< swap >        ::= < ref > SWAP < ref >

< branch >      ::= IF < condition > < block > <branch'>

< branch' >     ::= ""
                    | ELSE <block>

< loop >        ::= WHILE < condition > < block >

< condition >   ::= < expr > <condition'>

< condition' >  ::= EQ <expr>
                    | NOEQ <expr>
                    | LT <expr>
                    | LTE <expr>
                    | GT <expr>
                    | GTE <expr>

< expr >        ::= < term >
                    | < expr > PLUS < term >
                    | < expr > MINUS < term >

< expr' >       ::= PLUS <term> <expr'>
                    | MINUS <term> <expr'>
                    | ""

< term >        ::= < factor >
                    | < term > TIMES < factor >
                    | < term > DIV < factor >

< term' >       ::= TIMES <factor> <term'>
                    | DIV <factor> <term'>
                    | ""

< factor >      ::= < exponent > < factor' >

< factor' >     ::= EXP <exponent> <factor'>
                    | ""

< exponent >    ::= LPAREN < expr > RPAREN
                    | < ref >
                    | < literal >
                    | < call >

< print >       ::= print < arg-list >

< arg-list >    ::= < expr >
                    | < expr > COMMA < arg-list >

< read >        ::= read < ref-list >

< ref-list >    ::= < ref >
                    | < ref > COMMA < ref-list >

< ref >         ::= VARIABLE
                    | VARIABLE LBRACK < arg-list > RBRACK

< literal >     ::= < integer >
                    | < float >
                    | < char-lit >
                    | < string >

< call >        ::= VARIABLE LPAREN < call' >

< call' >       ::= < arg-list > RPAREN
                    | RPAREN

< integer >     ::= < digit >
                    | < integer > < digit >

< float >       ::= < integer > "." < integer >

< char-lit>     ::= "'" < character > "'"

< string >      ::= "\"" < characters > "\""

< characters>   ::= < character >
                    | < characters > < character >


informally stated (not in bnf)
==============================
< digit > any digit 0-9
< character > any character, with normal escapes \n, \t, \', \"
< letter> any upper or lower case letter

comments begin with "#" and extend to the end of a line


tokens
======
pROC := "PROC"
